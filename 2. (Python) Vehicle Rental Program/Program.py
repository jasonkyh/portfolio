#import both time and json #time to set delay in prog() function and json for import/export of data into a separate text fileimport timeimport json#-----------------------------------------------------------------------------#Class definition#Class - Vehicles (Car, Van, Trucks)class Vehicle:    def __init__(self, mpg, vin):        self.mpg = mpg        self.vin = vin            def get_vin(self):        return self.vin    def get_type(self):        if isinstance(self,Car):            return "Car"        if isinstance(self,Van):            return "Van"        if isinstance(self,Truck):            return "Truck"        def get_description(self):        return F"mpg: {self.mpg} and vin: {self.vin}"class Car(Vehicle):    def __init__(self, make_model, mpg, numPassengers, numDoors, vin):        #inherit mpg and vin from parent class        super().__init__(mpg, vin)        #unique attributes related to child class        self.make_model = make_model        self.numPassengers = numPassengers        self.numDoors = numDoors    def get_description(self):        return F"{self.make_model}  passengers: {self.numPassengers}  doors: {self.numDoors}  mpg: {self.mpg}  vin: {self.vin}"     class Van(Vehicle):    def __init__(self,make_model,mpg,numPassengers,vin):        #inherit mpg and vin from parent class        super().__init__(mpg, vin)        #unique attributes related to child class        self.make_model = make_model        self.numPassengers = numPassengers    def get_description(self):        return F"{self.make_model}  passengers: {self.numPassengers}  mpg: {self.mpg}  vin: {self.vin}"     class Truck(Vehicle):    def __init__(self,mpg,length,num_rooms,vin):        #inherit mpg and vin from parent class        super().__init__(mpg, vin)        #unique attributes related to child class        self.length = length        self.num_rooms = num_rooms    def get_description(self):        return F"{self.length}  Cargo space: {self.num_rooms}  mpg: {self.mpg}  vin: {self.vin}"     #Class - Vehiclecostclass Vehiclecost:    def __init__(self, vehicle_type, daily_rate, weekly_rate, per_mile_chrg, insur_rate):        self.vehicle_type = vehicle_type        self.daily_rate = daily_rate        self.weekly_rate = weekly_rate        self.per_mile_chrg = per_mile_chrg        self.insur_rate = insur_rate        def get_vehicle_type(self):        return self.vehicle_type        def get_daily_rate(self):        return self.daily_rate            def get_weekly_rate(self):        return self.weekly_rate        def get_per_mile_chrg(self):        return self.per_mile_chrg        def get_insur_rate(self):        return self.insur_rate        #Calculation of rental cost based on a given vehicle type, rental period, opt for insurance and miles    def calcrentalcost(self, vehicle_type, rental_period, want_insurance, miles_driving):                rental_weeks = rental_period // 7        remaining_days = rental_period % 7                #if rental period is less than 7 days -> daily rate applies        if rental_weeks == 0:            base_rate = rental_period * self.daily_rate        #if rental period is more than 7 days -> weekly rate + daily rate applies (e.g. 9 days -> 1 week + 2 day)        elif rental_weeks >= 0:            base_rate = (rental_weeks * self.weekly_rate) + (remaining_days * self.daily_rate)                miles_rate = self.per_mile_chrg * miles_driving        #want_insurance = 1 (true) or 0 (false)        insurance_cost = want_insurance * self.insur_rate * rental_period        totalrentalcost = base_rate + miles_rate + insurance_cost        return round(totalrentalcost,2)#-----------------------------------------------------------------------------#Objects definition#Vehicle#Read the data within the text files of car, van and truck - structured as a dictionary with list for each listwith open('vehicle_car_data.txt') as json_cardata:    vehiclecardata = json.load(json_cardata)    with open('vehicle_van_data.txt') as json_vandata:    vehiclevandata = json.load(json_vandata)    with open('vehicle_truck_data.txt') as json_truckdata:    vehicletruckdata = json.load(json_truckdata)#Carc1 = Car(vehiclecardata["make_model"][0],         vehiclecardata["mpg"][0],         vehiclecardata["numPassengers"][0],         vehiclecardata["numDoors"][0],         vehiclecardata["vin"][0])c2 = Car(vehiclecardata["make_model"][1],         vehiclecardata["mpg"][1],         vehiclecardata["numPassengers"][1],         vehiclecardata["numDoors"][1],         vehiclecardata["vin"][1])c3 = Car(vehiclecardata["make_model"][2],         vehiclecardata["mpg"][2],         vehiclecardata["numPassengers"][2],         vehiclecardata["numDoors"][2],         vehiclecardata["vin"][2])c4 = Car(vehiclecardata["make_model"][3],         vehiclecardata["mpg"][3],         vehiclecardata["numPassengers"][3],         vehiclecardata["numDoors"][3],         vehiclecardata["vin"][3])c5 = Car(vehiclecardata["make_model"][4],         vehiclecardata["mpg"][4],         vehiclecardata["numPassengers"][4],         vehiclecardata["numDoors"][4],         vehiclecardata["vin"][4])c6 = Car(vehiclecardata["make_model"][5],         vehiclecardata["mpg"][5],         vehiclecardata["numPassengers"][5],         vehiclecardata["numDoors"][5],         vehiclecardata["vin"][5])c7 = Car(vehiclecardata["make_model"][6],         vehiclecardata["mpg"][6],         vehiclecardata["numPassengers"][6],         vehiclecardata["numDoors"][6],         vehiclecardata["vin"][6])#Vanv1 = Van(vehiclevandata["make_model"][0],         vehiclevandata["mpg"][0],         vehiclevandata["numPassengers"][0],         vehiclevandata["vin"][0])v2 = Van(vehiclevandata["make_model"][1],         vehiclevandata["mpg"][1],         vehiclevandata["numPassengers"][1],         vehiclevandata["vin"][1])v3 = Van(vehiclevandata["make_model"][2],         vehiclevandata["mpg"][2],         vehiclevandata["numPassengers"][2],         vehiclevandata["vin"][2])v4 = Van(vehiclevandata["make_model"][3],         vehiclevandata["mpg"][3],         vehiclevandata["numPassengers"][3],         vehiclevandata["vin"][3])v5 = Van(vehiclevandata["make_model"][4],         vehiclevandata["mpg"][4],         vehiclevandata["numPassengers"][4],         vehiclevandata["vin"][4])v6 = Van(vehiclevandata["make_model"][5],         vehiclevandata["mpg"][5],         vehiclevandata["numPassengers"][5],         vehiclevandata["vin"][5])v7 = Van(vehiclevandata["make_model"][6],         vehiclevandata["mpg"][6],         vehiclevandata["numPassengers"][6],         vehiclevandata["vin"][6])#Truckt1 = Truck(vehicletruckdata["mpg"][0],         vehicletruckdata["length"][0],         vehicletruckdata["num_rooms"][0],         vehicletruckdata["vin"][0])t2 = Truck(vehicletruckdata["mpg"][1],         vehicletruckdata["length"][1],         vehicletruckdata["num_rooms"][1],         vehicletruckdata["vin"][1])t3 = Truck(vehicletruckdata["mpg"][2],         vehicletruckdata["length"][2],         vehicletruckdata["num_rooms"][2],         vehicletruckdata["vin"][2])t4 = Truck(vehicletruckdata["mpg"][3],         vehicletruckdata["length"][3],         vehicletruckdata["num_rooms"][3],         vehicletruckdata["vin"][3])t5 = Truck(vehicletruckdata["mpg"][4],         vehicletruckdata["length"][4],         vehicletruckdata["num_rooms"][4],         vehicletruckdata["vin"][4])t6 = Truck(vehicletruckdata["mpg"][5],         vehicletruckdata["length"][5],         vehicletruckdata["num_rooms"][5],         vehicletruckdata["vin"][5])t7 = Truck(vehicletruckdata["mpg"][6],         vehicletruckdata["length"][6],         vehicletruckdata["num_rooms"][6],         vehicletruckdata["vin"][6])#Vehicle cost#Read vehicle cost text - structured as a dictionary with list for each listwith open('vehicle_cost.txt') as json_vehcost:    vehiclecostdata = json.load(json_vehcost)#Get the index of car from the vehicle cost txtcarcostindex = vehiclecostdata['Vehicle Type'].index('Car')#Feed in the cost for carcar_cost = Vehiclecost((vehiclecostdata['Vehicle Type'][carcostindex]),                        (vehiclecostdata['Daily Rate'][carcostindex]),                        (vehiclecostdata['Weekly Rate'][carcostindex]),                        (vehiclecostdata['Per Mile Charge'][carcostindex]),                       (vehiclecostdata['Insurance Charge'][carcostindex]))#Get the index of van from the vehicle cost txtvancostindex = vehiclecostdata['Vehicle Type'].index('Van')#Feed in the cost for vanvan_cost = Vehiclecost((vehiclecostdata['Vehicle Type'][vancostindex]),                        (vehiclecostdata['Daily Rate'][vancostindex]),                        (vehiclecostdata['Weekly Rate'][vancostindex]),                        (vehiclecostdata['Per Mile Charge'][vancostindex]),                       (vehiclecostdata['Insurance Charge'][vancostindex]))#Get the index of truck from the vehicle cost txttruckcostindex = vehiclecostdata['Vehicle Type'].index('Truck')#Feed in the cost for trucktruck_cost = Vehiclecost((vehiclecostdata['Vehicle Type'][truckcostindex]),                        (vehiclecostdata['Daily Rate'][truckcostindex]),                        (vehiclecostdata['Weekly Rate'][truckcostindex]),                        (vehiclecostdata['Per Mile Charge'][truckcostindex]),                       (vehiclecostdata['Insurance Charge'][truckcostindex]))#create a vin list to store all the valid vinvin_list = []#iterate over all elements within the car's vin list to build a compiled vin listfor k1 in vehiclecardata["vin"]:    vin_list.append(k1)#iterate over all elements within the van's vin list to build a compiled vin list    for k2 in vehiclevandata["vin"]:    vin_list.append(k2)#iterate over all elements within the truck's vin list to build a compiled vin listfor k3 in vehicletruckdata["vin"]:    vin_list.append(k3)#Read reservation text - structured as a dictionary with list for each keys [to append later on]with open('listofreservation.txt') as json_reservationlist:    reservationdata = json.load(json_reservationlist)#-----------------------------------------------------------------------------#Functions definition#Main Menu - display options in main menudef menu():    print("*************************************************")    print("* Welcome to the Friendly Vehicle Rental Agency *")    print("*************************************************\n")    print("<<< MAIN MENU >>>")    print("[1] Display vehicle types")    print("[2] Check rental costs")    print("[3] Check available vehicles")    print("[4] Get cost of specific rental")    print("[5] Make a reservation")    print("[6] View / Cancel a reservation")    print("[7] Quit\n")    #[1] Vehicle Types - display vehicle types and return to main menudef vehtype():    print("------ Types of Vehicles Available for Rent ------")    print("[1] Car")    print("Recommended for: Casual drives down the town, short getaways or running errands over the weekends.\n")    print("[2] Van")    print("Recommended for: Road trip adventures.\n")    print("[3] Truck")    print("Recommended for: Transportation of large and bulky items for house moving or business needs.")    print("--------------------------------------------------\n")    print("Returning back to the main menu ......\n")    #Time delay of 1 second then return to main menu as not required to do any input/function in [1]    time.sleep(1)    menu()    #[2] Vehicle rental costs - display rental costs for each vehicle type selectiondef vehrentalcost():    print("Please enter the type of vehicle. ")    print("[1] Car")    print("[2] Van")    print("[3] Truck\n")        test1 = True     #while loop for input validity on vehicle type    while test1:            vehicle_type = input("Enter: ")                #display car rental cost        if vehicle_type == "1":            test1 = False            print("---------- Rental Charges for Cars ----------\n")            print("Daily     Weekly     Per Mile     Daily")            print("Rate      Rate       Charges      Insurance")            print("(S$)      (S$)       (S$)         (S$)\n")            print("{}     {}        {}         {}".format(car_cost.daily_rate,                                               car_cost.weekly_rate, car_cost.per_mile_chrg, car_cost.insur_rate))            print("---------------------------------------------\n")                #display van rental cost        elif vehicle_type == "2":            test1 = False            print("---------- Rental Charges for Vans ----------\n")            print("Daily     Weekly     Per Mile     Daily")            print("Rate      Rate       Charges      Insurance")            print("(S$)      (S$)       (S$)         (S$)\n")            print("{}        {}        {}          {}".format(van_cost.daily_rate,                                               van_cost.weekly_rate, van_cost.per_mile_chrg, van_cost.insur_rate))            print("---------------------------------------------\n")                #display truck rental cost        elif vehicle_type == "3":            test1 = False            print("--------- Rental Charges for Trucks ---------\n")            print("Daily     Weekly     Per Mile     Daily")            print("Rate      Rate       Charges      Insurance")            print("(S$)      (S$)       (S$)         (S$)\n")            print("{}     {}        {}         {}".format(truck_cost.daily_rate,                                               truck_cost.weekly_rate, truck_cost.per_mile_chrg, truck_cost.insur_rate))            print("---------------------------------------------\n")                else:            print("Invalid option. Please try again.")#[3] Check available vehicledef checkavailvehicle():    print("Please enter the type of vehicle. ")    print("[1] Car")    print("[2] Van")    print("[3] Truck\n")        test4 = True     #while loop for input validity on vehicle type    while test4:                            vehicle_type2 = input("Enter: ")                if vehicle_type2 == "1":            test4 = False            print("---------------------------- Available Cars ----------------------------\n")            print("Make /              Mileage     Number of     Number of    Vehicle")            print("Model               (mpg)       Passengers    Doors        ID Number\n")                        #if c1 not in reservationdata -> means it's not reserved and should be reflected as available            if c1.vin not in reservationdata['Vehicle ID Number']:                 print("{}    {}          {}             {}            {}".format(c1.make_model, c1.mpg, c1.numPassengers,                                                        c1.numDoors, c1.vin))               if c2.vin not in reservationdata['Vehicle ID Number']:                 print("{}    {}          {}             {}            {}".format(c2.make_model, c2.mpg, c2.numPassengers,                                                        c2.numDoors, c2.vin))            if c3.vin not in reservationdata['Vehicle ID Number']:                 print("{}         {}          {}             {}            {}".format(c3.make_model, c3.mpg, c3.numPassengers,                                                        c3.numDoors, c3.vin))            if c4.vin not in reservationdata['Vehicle ID Number']:                print("{}  {}          {}             {}            {}".format(c4.make_model, c4.mpg, c4.numPassengers,                                                        c4.numDoors, c4.vin))            if c5.vin not in reservationdata['Vehicle ID Number']:                print("{}  {}          {}             {}            {}".format(c5.make_model, c5.mpg, c5.numPassengers,                                                        c5.numDoors, c5.vin))            if c6.vin not in reservationdata['Vehicle ID Number']:                 print("{}    {}          {}             {}            {}".format(c6.make_model, c6.mpg, c6.numPassengers,                                                        c6.numDoors, c6.vin))            if c7.vin not in reservationdata['Vehicle ID Number']:                 print("{}    {}          {}             {}            {}".format(c7.make_model, c7.mpg, c7.numPassengers,                                                        c7.numDoors, c7.vin))                        print("\n------------------------------------------------------------------------\n")                    elif vehicle_type2 == "2":            test4 = False            print("---------------------------- Available Vans ----------------------------\n")            print("Make /                    Mileage     Number of     Vehicle")            print("Model                     (mpg)       Passengers    ID Number\n")                        if v1.vin not in reservationdata['Vehicle ID Number']:                print("{}     {}          {}             {}".format(v1.make_model, v1.mpg, v1.numPassengers,                                                                    v1.vin))               if v2.vin not in reservationdata['Vehicle ID Number']:                print("{}     {}          {}             {}".format(v2.make_model, v2.mpg, v2.numPassengers,                                                                    v2.vin))            if v3.vin not in reservationdata['Vehicle ID Number']:                print("{}     {}          {}             {}".format(v3.make_model, v3.mpg, v3.numPassengers,                                                                    v3.vin))            if v4.vin not in reservationdata['Vehicle ID Number']:                print("{}             {}          {}             {}".format(v4.make_model, v4.mpg, v4.numPassengers,                                                                        v4.vin))            if v5.vin not in reservationdata['Vehicle ID Number']:                print("{}             {}          {}             {}".format(v5.make_model, v5.mpg, v5.numPassengers,                                                                        v5.vin))            if v6.vin not in reservationdata['Vehicle ID Number']:                print("{}           {}          {}             {}".format(v6.make_model, v6.mpg, v6.numPassengers,                                                                        v6.vin))            if v7.vin not in reservationdata['Vehicle ID Number']:                print("{}           {}          {}             {}".format(v7.make_model, v7.mpg, v7.numPassengers,                                                                        v7.vin))                        print("\n------------------------------------------------------------------------\n")                elif vehicle_type2 == "3":            test4 = False            print("---------------------------- Available Trucks ----------------------------\n")            print("Make /               Mileage     Cargo     Vehicle")            print("Model                (mpg)       Space     ID")                        print("                                (Bedroom)  Number\n")                        if t1.vin not in reservationdata['Vehicle ID Number']:                print("{}             {}          {}         {}".format(t1.length, t1.mpg, t1.num_rooms,                                                                    t1.vin))               if t2.vin not in reservationdata['Vehicle ID Number']:                print("{}             {}          {}         {}".format(t2.length, t2.mpg, t2.num_rooms,                                                                    t2.vin))             if t3.vin not in reservationdata['Vehicle ID Number']:                print("{}       {}          {}         {}".format(t3.length, t3.mpg, t3.num_rooms,                                                                    t3.vin))            if t4.vin not in reservationdata['Vehicle ID Number']:                 print("{}       {}          {}         {}".format(t4.length, t4.mpg, t4.num_rooms,                                                                    t4.vin))            if t5.vin not in reservationdata['Vehicle ID Number']:                print("{}     {}           {}         {}".format(t5.length, t5.mpg, t5.num_rooms,                                                                    t5.vin))            if t6.vin not in reservationdata['Vehicle ID Number']:                print("{}     {}           {}         {}".format(t6.length, t6.mpg, t6.num_rooms,                                                                    t6.vin))            if t7.vin not in reservationdata['Vehicle ID Number']:                print("{}     {}           {}         {}".format(t7.length, t7.mpg, t7.num_rooms,                                                                    t7.vin))                        print("\n------------------------------------------------------------------------\n")                    else:            print("Invalid option. Please try again.")             #[4]  Get cost of specific rental#Subfunction - rental costdef subfunc_calculaterentalcost(vehicle_type):    test3 = True    #while loop for input validity    while test3:         rental_period = input("How many days do you need the vehicle for? ")            #input validity on rental days -> must be numeric        if rental_period.isdigit() == True:                     miles_driving = input("How many miles do you expect to drive for? ")                    #input validity on rental miles -> must be numeric            if miles_driving.isdigit() == True:                            #Convert input of rental period and miles into integer for calculation                rental_period = int(rental_period)                miles_driving = int(miles_driving)                            insurance_opt = input("Would you like to opt for insurance coverage? (Y/N)")                                if insurance_opt == "Y":                    want_insurance = 1                                        if vehicle_type == "Car":                        totalcost = car_cost.calcrentalcost(vehicle_type, rental_period, want_insurance, miles_driving)                        charge_per_mile = car_cost.per_mile_chrg                                            elif vehicle_type == "Van":                        totalcost = van_cost.calcrentalcost(vehicle_type, rental_period, want_insurance, miles_driving)                        charge_per_mile = van_cost.per_mile_chrg                                            elif vehicle_type == "Truck":                        totalcost = truck_cost.calcrentalcost(vehicle_type, rental_period, want_insurance, miles_driving)                        charge_per_mile = truck_cost.per_mile_chrg                                        print("\n---------- Estimated Rental Charges ----------\n")                    print("Vehicle type: {}".format(vehicle_type))                    print("Rental period: {} days".format(rental_period))                    print("Estimated driving miles: {} miles".format(miles_driving))                    print("Charge per mile: S${}".format(charge_per_mile))                    print("Insurance coverage: Opted in\n")                    print("Your estimated total rental cost would be S${}.".format(totalcost))                    test3 = False                                elif insurance_opt == "N":                    want_insurance = 0                                        if vehicle_type == "Car":                        totalcost = car_cost.calcrentalcost(vehicle_type, rental_period, want_insurance, miles_driving)                        charge_per_mile = car_cost.per_mile_chrg                                            elif vehicle_type == "Van":                        totalcost = van_cost.calcrentalcost(vehicle_type, rental_period, want_insurance, miles_driving)                        charge_per_mile = van_cost.per_mile_chrg                                            elif vehicle_type == "Truck":                        totalcost = truck_cost.calcrentalcost(vehicle_type, rental_period, want_insurance, miles_driving)                        charge_per_mile = truck_cost.per_mile_chrg                                        print("\n---------- Estimated Rental Charges ----------\n")                    print("Vehicle type: {}".format(vehicle_type))                    print("Rental period: {} days".format(rental_period))                    print("Estimated driving miles: {} miles".format(miles_driving))                    print("Charge per mile: S${}".format(charge_per_mile))                    print("Insurance coverage: Opted out\n")                    print("Your estimated total rental cost would be S${}.".format(totalcost))                    test3 = False                                #input validity on insurance coverage choice -> must be "Y" or "N"                else:                     print("Invalid input choice. Please re-enter all the inputs again.")                        else:                 print("Invalid number of miles. Please re-enter all the inputs again.")                    else:             print("Invalid days of rental. Please re-enter days of rental.")#Main calculate rental cost for all vehicledef calculaterentalcost():    print("Please enter the type of vehicle. ")    print("[1] Car")    print("[2] Van")    print("[3] Truck\n")        test2 = True     #while loop for input validity on vehicle type    while test2:                            vehicle_type2 = input("Enter: ")                if vehicle_type2 == "1":            test2 = False            subfunc_calculaterentalcost("Car")                    elif vehicle_type2 == "2":            test2 = False            subfunc_calculaterentalcost("Van")                elif vehicle_type2 == "3":            test2 = False            subfunc_calculaterentalcost("Truck")                    else:            print("Invalid option. Please try again.")               #[5]  Reserve a particular vehicledef reservevehicle():         while True:                 #input vin of vehicle to be reserved        vehicle_reserved = input("Please enter the Vehicle ID Number to reserve: ")                #vin must be a valid vin in the compiled list in order to be reserved        if vehicle_reserved in vin_list:                        #input vin must not be reserved (in the reserved list) so it can be reserved            if vehicle_reserved not in reservationdata['Vehicle ID Number']:                            #input customer details for reservation                print("Please enter your details as follows: ")                firstname = input("First name: ")                lastname = input("Last name: ")                address = input("Address: ")                                while True:                     mobileno = input("Mobile number:")                                        #input validity check for mobile no (8 digits)                    if (mobileno.isdigit()) and (len(mobileno) == 8) and (mobileno[0] == 9 or 8):                                        while True:                            credit_card = input("16-digits Credit card number without spaces: ")                            #input validity check for credit card number (16 digits)                            if credit_card.isdigit() and len(credit_card) == 16:                                                                if credit_card not in reservationdata['Credit Card']:                                                                    print("\nReservation successfully made!\n")                                    #Append reservation details into reservationdata                                    reservationdata ['Vehicle ID Number'].append(vehicle_reserved)                                    reservationdata ['First Name'].append(firstname)                                    reservationdata ['Last Name'].append(lastname)                                    reservationdata ['Address'].append(address)                                    reservationdata ['Credit Card'].append(credit_card)                                    reservationdata ['Mobile Number'].append(mobileno)                                                                        #update reservation text file                                     with open('listofreservation.txt', 'w') as outfile:                                        json.dump(reservationdata, outfile)                                                                        break                                                                    else:                                      print("Only one unique credit card number for each vehicle reservation. Please enter another credit card number.")                                                               else:                                 print("Credit card number is invalid. Please try again.")                                                break                                            else:                        print("Mobile number is invalid. Please try again.")                                    break                        else:                print("Vehicle ID Number is already reserved. Please try an available Vehicle ID Number.")                        else:             print("Invalid Vehicle ID Number. Please try again.")   #[6]  View / cancel a reservationdef cancelreservation():              while True:                     #input credit card number            ccnum_reserved = input("Please enter the credit card number used in reservation: ")                        #to search for reservation using credit card number in the reservationdata            if ccnum_reserved in reservationdata['Credit Card']:                                #using the credit card no to find the index of the credit card                 index_to_remove = reservationdata['Credit Card'].index(ccnum_reserved)                                #View reservation details                print("------------------- Reservation Information -------------------\n")                print("Vehicle ID Number: {}".format(reservationdata['Vehicle ID Number'][index_to_remove]))                print("Name: {} {}".format(reservationdata['First Name'][index_to_remove], reservationdata['Last Name'][index_to_remove]))                print("Address: {}".format(reservationdata['Address'][index_to_remove]))                print("Credit Card: {}".format(reservationdata['Credit Card'][index_to_remove]))                print("Mobile Number: {}".format(reservationdata['Mobile Number'][index_to_remove]))                                #Ask user if want to cancel his reservation                while True:                                        cancel_reservation = input("\nWould you like to cancel your reservation? (Y/N)")                                        if cancel_reservation == "Y":                                            #delete all the values at the index position where the credit card no above is found                        for k in reservationdata:                            del (reservationdata[k][index_to_remove])                                                print("Reservation successfully cancelled.")                                                #update reservation text file                         with open('listofreservation.txt', 'w') as outfile:                            json.dump(reservationdata, outfile)                                                break                                        elif cancel_reservation == "N":                                                print("No changes made to reservation.")                                                break                                        #Test for input validity                    else:                         print("Invalid input entered. Please try again.")                                break                            else:                 print("No reservation records found based on the credit card number provided.")                break                #required to break loop here if not will stuck in infinite loop till correct credit card input#-----------------------------------------------------------------------------#Main Programdef prog():        menu()    test = True        while test:                option = input("Enter Option: ")                #didn't convert to int for the option input as wanted to simplify input validity later on.        #only required to check for exact match, if failed, then will have to reinput via while loop (no need to test for isdigit())        if option == "1":             print("Option 1 is selected.\n")            vehtype()                    elif option == "2":             #do option 2 stuffs            print("Option 2 is selected.\n")            #stop loop for main menu option            test = False            vehrentalcost()                        returnmainmenu = input("Enter [R] to return to main menu.\nOtherwise, enter any key to exit program.\n")                        if returnmainmenu == "R":                #restart loop for main menu option                test = True                print("Returning back to the main menu ......\n")                #Time delay of 1 second then return to main menu                time.sleep(1)                menu()                            else:                print("Thank you for using the Friendly Rental Agency. See you soon!")                                           elif option == "3":             #do option 3 stuffs            print("Option 3 is selected.\n")            test = False            checkavailvehicle()                        returnmainmenu = input("Enter [R] to return to main menu.\nOtherwise, enter any key to exit program.\n")                        if returnmainmenu == "R":                #restart loop for main menu option                test = True                print("Returning back to the main menu ......\n")                #Time delay of 1 second then return to main menu                 time.sleep(1)                menu()                            else:                print("Thank you for using the Friendly Rental Agency. See you soon!")                    elif option == "4":             #do option 4 stuffs            print("Option 4 is selected.\n")            test = False            calculaterentalcost()                        returnmainmenu = input("Enter [R] to return to main menu.\nOtherwise, enter any key to exit program.\n")                        if returnmainmenu == "R":                #restart loop for main menu option                test = True                print("Returning back to the main menu ......\n")                #Time delay of 1 second then return to main menu                 time.sleep(1)                menu()                            else:                print("Thank you for using the Friendly Rental Agency. See you soon!")                    elif option == "5":             #do option 5 stuffs            print("Option 5 is selected.\n")            test = False            checkavailvehicle()            reservevehicle()                        returnmainmenu = input("Enter [R] to return to main menu.\nOtherwise, enter any key to exit program.\n")                        if returnmainmenu == "R":                #restart loop for main menu option                test = True                print("Returning back to the main menu ......\n")                #Time delay of 1 second then return to main menu                 time.sleep(1)                menu()                            else:                print("Thank you for using the Friendly Rental Agency. See you soon!")                elif option == "6":             #do option 6 stuffs            print("Option 6 is selected.\n")            test = False            cancelreservation()                        returnmainmenu = input("Enter [R] to return to main menu.\nOtherwise, enter any key to exit program.\n")                        if returnmainmenu == "R":                #restart loop for main menu option                test = True                print("Returning back to the main menu ......\n")                #Time delay of 1 second then return to main menu                 time.sleep(1)                menu()                            else:                print("Thank you for using the Friendly Rental Agency. See you soon!")                elif option == "7":            print("Thank you for using the Friendly Rental Agency. See you soon!")            test = False                    else:             print("Invalid option. Please try again.\n")#-----------------------------------------------------------------------------            prog()